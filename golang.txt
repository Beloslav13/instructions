Вывод информации через fmt.Printf()

%t: для вывода значений типа boolean (true или false)

%b: для вывода целых чисел в двоичной системе

%c: для вывода символов, представленных числовым кодом

%d: для вывода целых чисел в десятичной системе

%o: для вывода целых чисел в восьмеричной системе

%q: для вывода символов в одинарных кавычках

%x: для вывода целых чисел в шестнадцатеричной системе, буквенные символы числа имеют нижний регистр a-f

%X: для вывода целых чисел в шестнадцатеричной системе, буквенные символы числа имеют верхний регистр A-F

%U: для вывода символов в формате кодов Unicode, например, U+1234

%e: для вывода чисел с плавающей точкой в экспоненциальном представлении, например, -1.234456e+78

%E: тоже самое что %e но в верхнем регистре, например, -1.234456E+78

%f: для вывода чисел с плавающей точкой, например, 123.456

%F: то же самое, что и %f

%g   %e для огромных экспонент, %f в противном случае

%G    %E для огромных экспонент, %F в противном случае

%s: для вывода строки

%p: для вывода значения указателя - адреса в шестнадцатеричном представлении (указатели мы пройдем на следующих уроках)

%T для вывода типа переменной


// name не обязателен
go mod init <name> // инициализировать новый модуль в текущем каталоге

// другие команды
go mod download    скачать модули в локальный кеш
go mod edit        редактировать go.mod из инструментов или скриптов
go mod graph       напечатать граф требований модуля
go mod tidy        добавить отсутствующие и удалить неиспользуемые модули
go mod vendor      делает вендорную копию зависимостей
go mod verify      проверить зависимости ожидаемого содержания
go mod why         объяснять, зачем нужны пакеты или модули


    // функции ниже принимают на вход тип rune


    // проверка символа на цифру
	fmt.Println(unicode.IsDigit('1')) // true
    // проверка символа на букву
	fmt.Println(unicode.IsLetter('a')) // true
    // проверка символа на нижний регистр
	fmt.Println(unicode.IsLower('A')) // false
    // проверка символа на верхний регистр
	fmt.Println(unicode.IsUpper('A')) // true
    // проверка символа на пробел
    // пробел это не только ' ', но и:
    //  '\t', '\n', '\v', '\f', '\r' - подробнее читайте в документации
	fmt.Println(unicode.IsSpace('\t')) // true

    // С помощью функции Is можно проверять на кастомный RangeTable:
    // например, проверка на латиницу:
 	fmt.Println(unicode.Is(unicode.Latin, 'ы')) // false


    // функции преобразований
	fmt.Println(string(unicode.ToLower('F'))) // f
	fmt.Println(string(unicode.ToUpper('f'))) // F
}


// Содержится ли подстрока в строке
        strings.Contains("test", "es"),
        // результат: true

        // Кол-во подстрок в строке
        strings.Count("test", "t"),
        // результат: 2

        // Начинается ли строка с префикса
        strings.HasPrefix("test", "te"),
        // результат: true

        // Заканчивается ли строка суффиксом
        strings.HasSuffix("test", "st"),
        // результат: true

        // Возвращает начальный индекс подстроки в строке, а при отсутствии вхождения возвращает -1
        strings.Index("test", "e"),
        // результат: 1

        // объединяет массив строк через символ
        strings.Join([]string{"hello","world"}, "-"),
        // результат: "hello-world"

        // Повторяет строку n раз подряд
        strings.Repeat("a", 5),
        // результат: "aaaaa"

        // Функция Replace заменяет любое вхождение old в вашей строке на new
        // Если значение n равно -1, то будут заменены все вхождения.
        // Общий вид: func Replace(s, old, new string, n int) string
        // Пример:
        strings.Replace("blanotblanot", "not", "***", 	-1),
        // результат: "bla***bla***"

        // Разбивает строку согласно разделителю
        strings.Split("a-b-c-d-e", "-"),
        // результат: []string{"a","b","c","d","e"}

        // Возвращает строку c нижним регистром
        strings.ToLower("TEST"),
        // результат: "test"

        // Возвращает строку c верхним регистром
        strings.ToUpper("test"),
        // результат: "TEST"

        // Возвращает строку с вырезанным набором
        strings.Trim("tetstet", "te")
        // результат: s


package main

import "fmt"

func do(i interface{}) {
	switch v := i.(type) {
	case int:
		fmt.Println("Умножим на 2:", v*2)
	case string:
		fmt.Println(v + " golang")
	default:
		fmt.Printf("Я не знаю такого типа %T!\n", v)
	}
}

func main() {
	do(21)
	do("hello")
	do(true)
}