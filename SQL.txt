-- Вставка (добавление) данных в таблицу
INSERT INTO courses (name, slug, lessons_count, body)
  VALUES ('basics of programming', 'basics', 10, 'this is theory');

-- INSERT позволяет вставить сразу несколько записей в рамках одного запроса:
INSERT INTO courses (name, slug) VALUES
  ('Bash', 'bash'), ('PHP', 'php'), ('Ruby', 'ruby');

-- Обновление (изменение) данных
UPDATE courses SET body = 'updated!' WHERE slug = 'bash';
-- Обычно UPDATE запрос состоит из двух частей. В первой (там, где SET) описывается какое значение установить в какое поле. Во второй (той, что идёт после WHERE) указывается ограничение на то,
-- к каким строкам применить обновление.

-- За одну операцию можно обновить несколько полей. Для этого достаточно перечислить каждое присваивание через запятую в части SET. Порядок в котором изменяются поля — не важен:
UPDATE courses SET body = 'updated!', name = 'Bash' WHERE slug = 'bash';

-- Операции сравнения
UPDATE courses SET name = 'new name' WHERE lessons_count > 3;
UPDATE courses SET name = 'another new name' WHERE lessons_count < 2;

-- Логические операции
-- И
UPDATE courses SET name = 'new name'
  WHERE slug = 'bash' AND lessons_count > 3;

-- ИЛИ
UPDATE courses SET name = 'another new name'
  WHERE lessons_count < 2 OR lessons_count > 8;


-- Удаление данных
DELETE FROM courses WHERE slug = 'bash';

-- В базах данных есть ещё один способ удалять данные в таблице — TRUNCATE. Он не является частью стандарта, но реализован большинством баз данных. У него две особенности:
--	 1. Он предназначен для полной очистки таблиц.
--	 2. В отличие от DELETE, он выполняется очень эффективно так как у TRUNCATE нет возможности задавать условия, а значит СУБД не нужно ничего дополнительно анализировать.
--	 Она сразу очищает место на диске минуя все промежуточные этапы.
TRUNCATE courses;


-- После WHERE указывается имя поля, которое сравнивается с некоторым значением (это один из вариантов)
-- Выбираем всех пользователей, родившихся ранее 21 октября 2018 года
SELECT * FROM users WHERE birthday < '2018-10-21';

-- Использовать пейджинг на уровне базы данных:
SELECT * FROM users LIMIT 3;

-- Однако, SQL НЕ гарантирует никакого порядка в выборках выше. Если явно не указать сортировку, то мы не можем достоверно знать, в каком порядке вернутся данные.
-- Поэтому в подобных выборках всегда присутствует секция ORDER BY
SELECT * FROM users ORDER BY birthday;

-- Если нужно отсортировать в обратном порядке, то надо добавить ключевое слово DESC (англ. descending — "убывающий").
SELECT * FROM users ORDER BY birthday DESC;

-- Реляционная модель требует от нас уникальности каждой записи. Для чего это нужно? Иначе невозможно понять что к чему
-- относится и с какой записью нужно работать при изменениях. Очень легко начать править не то и
-- потерять важную информацию. Причем мы даже не можем полагаться на порядок данных внутри таблицы, ведь он не гарантирован.

-- Реализовать уникальность можно несколькими способами, например, добавить новых полей, которые сделают запись уникальной,
-- например дату заказа. Этот способ не очень надежный, а главное не очень удобный в работе.
-- Придется постоянно анализировать весь набор полей. Гораздо лучше добавить первичный ключ.

-- Первичный ключ это поле или набор полей, которое содержит уникальное значение для каждой записи.
-- Первичный ключ не может меняться, его значение однозначно определяет любую запись в таблице.

-- В качестве первичного ключа можно использовать какое-то значение из окружающего мира, например email или ФИО,
-- но нужно однозначно убедиться что ключ не будет повторяться. Такой первичный ключ называется естественным.
-- Естественные ключи используют редко из-за их ненадежности. Почти наверняка они не уникальны и могут изменяться или повторяться.
-- Например, номер паспорта меняется при смене паспорта.

-- Другой подход основан на использовании автоматически генерируемых уникальных значений.
-- Такой первичный ключ называется суррогатным и поддерживается любой базой данных "из коробки".
-- Иногда это просто числа, а иногда и сложные число-буквенные строки (хеши).

